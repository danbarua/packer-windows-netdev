# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
    config.vm.define "vagrant-net_dev"
    config.vm.box = "net_dev"

    # Admin user name and password
    config.winrm.username = "vagrant"
    config.winrm.password = "vagrant"

    config.vm.guest = :windows
    config.windows.halt_timeout = 15

    config.vm.communicator = "winrm"
    config.vm.network :forwarded_port, guest: 5985, host: 5985, id: "winrm", auto_correct: true

    config.vm.provider "vmware_fusion" do |v|
        v.gui = true
        v.vmx["memsize"] = "4096"
        v.vmx["numvcpus"] = "4"

        v.vmx["ethernet0.virtualDev"] = "vmxnet3"
        v.vmx["RemoteDisplay.vnc.enabled"] = "false"
        v.vmx["RemoteDisplay.vnc.port"] = "5900"
        v.vmx["scsi0.virtualDev"] = "lsisas1068"

        #fusion performance hacks
        v.vmx["logging"] = "FALSE"
        v.vmx["MemTrimRate"] = "0"
        v.vmx["MemAllowAutoScaleDown"] = "FALSE"
        v.vmx["mainMem.backing"] = "swap"
        v.vmx["sched.mem.pshare.enable"] = "FALSE"
        v.vmx["snapshot.disabled"] = "TRUE"
        v.vmx["isolation.tools.unity.disable"] = "TRUE"
        v.vmx["unity.allowCompostingInGuest"] = "FALSE"
        v.vmx["unity.enableLaunchMenu"] = "FALSE"
        v.vmx["unity.showBadges"] = "FALSE"
        v.vmx["unity.showBorders"] = "FALSE"
        v.vmx["unity.wasCapable"] = "FALSE"

        #v.vmx["snapshot.disabled"] = "TRUE"
    end

    #Copy Resharper license and register if environment var is set
    if ENV['RESHARPER_LICENSE_REGKEY'] != nil
        config.vm.provision "file" do |s|
            s.source = ENV['RESHARPER_LICENSE_REGKEY']
            s.destination = "resharper.reg"
        end

        config.vm.provision "shell",
            inline: 'reg import c:\Users\vagrant\resharper.reg'

        config.vm.provision "shell",
            inline: 'del c:\Users\vagrant\resharper.reg'
    end

    $git_user = `git config user.name`
    config.vm.provision "shell",
        inline: "git config --global user.name \"#$git_user\""

    $git_email = `git config user.email`
    config.vm.provision "shell",
        inline: "git config --global user.email #$git_email"
  
    # copy user's ssh key, if present
    ssh_key = Pathname.new("#{Dir.home}/.ssh/id_rsa");
    config.vm.provision :shell, :inline => "Set-Content C:/Users/vagrant/.ssh/id_rsa \"#{ssh_key.read()}\"", privileged: false if ssh_key.exist?

end
